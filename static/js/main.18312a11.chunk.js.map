{"version":3,"sources":["graph/parser/adjacencyList.ts","graph/parser/edgesList.ts","graph/graph-builder/directedGraph.ts","graph/createGraph.ts","component/graph.tsx","algoLinks.tsx","component/input.tsx","inputFormat.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AdjacencyListParser","S","isWeighted","is0","edges","N","this","withWeight","withoutWeight","l","JSON","parse","console","log","i","length","j","push","EdgesListParser","forEach","ed","Math","max","GraphBuild","n","e","nodes","id","label","toString","edge","undefined","from","to","smooth","type","roundness","a","b","asert","A","B","M","T","Error","create","s","inputFormat","graphType","isPlain","glist","arr","split","trim","map","ee","parseInt","stringify","graph","getNumberOfNodes","getEdges","E","mx","Number","isInteger","validateEdges","getGraph","GraphElement","inputString","isDirected","setShowGraph","className","style","height","textAlign","options","arrows","enabled","onClick","links","name","link","Input","setinputString","setinputFormat","setGraphType","format","error","setIsWeighted","setIs0","inputType","setInputType","margin","borderRight","checked","value","onChange","width","target","placeholder","ex","rows","padding","resize","whiteSpace","text","exp","color","borderRadius","AlgoLinks","rel","href","formatData","plain","unw","edg","in","w","array","adj","add","join","s1","s0","f","x","isNaN","formatFor0","App","useState","setGraph","showGraph","setError","input","React","useEffect","props","err","message","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","data-icon","data-size","aria-label","document","getElementById"],"mappings":"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","file":"static/js/main.18312a11.chunk.js","sourcesContent":["class AdjacencyListParser {\n    edges: number[][];\n    N: number;\n    withoutWeight(S: string, is0: boolean): void {\n        let l: number[][] = JSON.parse(S);\n        console.log(l)\n        for (let i = 0; i < l.length; i++) {\n            for (let j = 0; j < l[i].length; j++) {\n                this.edges.push([i + (is0?0:1), l[i][j]]);\n            }\n        }\n        this.N = l.length;\n    }\n    withWeight(S: string,is0:boolean): void {\n        let l: number[][][] = JSON.parse(S);\n        for (let i = 0; i < l.length; i++) {\n            for (let j = 0; j < l[i].length; j++) {\n                this.edges.push([i + (is0?0:1), l[i][j][0], l[i][j][1]]);\n            }\n        }\n        this.N = l.length;\n    }\n    constructor(S: string, isWeighted: boolean, is0: boolean) {\n        this.edges = []\n        this.N = 0;\n        if(isWeighted) this.withWeight(S,is0);\n        else this.withoutWeight(S,is0);\n    }\n    getEdges(): number[][] { return this.edges; }\n    getNumberOfNodes(): number { return this.N; }\n}\nexport default AdjacencyListParser;","class EdgesListParser {\n    edges: number[][];\n    N: number = 0;\n    constructor(S: string, isWeighted: boolean, is0: boolean) {\n        let l: number[][] = JSON.parse(S);\n        this.edges = l\n        l.forEach(ed => {\n            this.N = Math.max(this.N, ed[0], ed[1]);\n        })\n        if(is0) this.N++;\n}\n    getEdges(): number[][] { return this.edges; }\n    getNumberOfNodes(): number { return this.N; }\n}\nexport default EdgesListParser;","class GraphBuild {\n    nodes: { id: number, label: string }[] = [];\n    edges: { id: number, from: number, to: number, label?: string, smooth?:any }[] = [];\n    N;\n    constructor(n: number, e: number[][], isWeighted: boolean,  is0: boolean) {\n        for (let i = 0; i < n; i++) {\n            this.nodes.push({ id: i + (is0?0:1), label: (i + (is0?0:1)).toString() })\n        }\n        if (e) {\n            e.forEach((edge,i) => {\n                if (isWeighted && edge[2] !== undefined) this.edges.push({  id: i, from: edge[0], to: edge[1], label: edge[2].toString() });\n                else this.edges.push({ id: i, from: edge[0], to: edge[1], smooth: {type: 'curvedCW', roundness: 0.2} });\n            });\n        }\n        console.log(e)\n        this.N = n;\n    }\n    addEdge(a: number, b: number, id:number) {\n        if (a > 0 && a <= this.N && b > 0 && b <= this.N) {\n            this.edges.push({ id, from: a, to: b });\n        }\n    }\n    getEdges() { return this.edges; }\n    getNodes() { return this.nodes; }\n    getGraph() {\n        return { nodes: this.nodes, edges: this.edges }\n    }\n}\n\nexport default GraphBuild;","import AdjacencyListParser from './parser/adjacencyList'\nimport EdgesListParser from './parser/edgesList'\nimport GraphBuild from './graph-builder/directedGraph'\n\nfunction asert(A: any, B: any, M: string, T: number) {\n    if ((T === 0 && A !== B) || (T === 1 && A > B)) {\n        throw new Error(M);\n    }\n}\n\nfunction validateEdges(E: number[][], N: number, isWeighted:boolean) {\n    // Validate all nodes less than N;\n    let mx = 0;\n    E.forEach(e => {\n        // console.log(e.length, isWeighted?3:2)\n        asert(e.length, isWeighted?3:2, `Found an invalid edge for ${isWeighted?\"a weighted\":\"an unweighted\"} graph.`, 0);\n        asert(Number.isInteger(e[0]), true, \"Expected number, found '\" + e[0] + \"'.\", 0);\n        asert(Number.isInteger(e[1]), true, \"Expected number, found '\" + e[1] + \"'.\", 0);\n        mx = Math.max(mx, e[0], e[1]);\n    })\n    asert(mx, N, \"Edge ID should be less than \" + N + \".\", 1);\n}\nfunction create(s: string, inputFormat: string, graphType: string, isWeighted:boolean,is0: boolean, isPlain: boolean) {\n    var glist;\n    if(isPlain){\n        let arr:number[][]=[]\n        let X=s.split(\"\\n\")\n        X.forEach((e,i)=>{\n            if(i===0) return;\n            arr.push(e.trim().split(' ').map((ee)=>parseInt(ee)))\n        })\n        s=JSON.stringify(arr);\n    }\n    if (inputFormat === \"edg\") glist = new EdgesListParser(s, isWeighted,is0);\n    else glist = new AdjacencyListParser(s, isWeighted,is0);\n\n    var graph = new GraphBuild(glist.getNumberOfNodes(), glist.getEdges(), isWeighted,is0);\n    // console.log(glist.getEdges())\n    validateEdges(glist.getEdges(), graph.N, isWeighted);\n    return graph.getGraph();\n}\nexport default create;","import React from 'react';\nimport Graph from 'vis-react';\n\nfunction GraphElement({ inputString, graph, inputFormat, isDirected, setShowGraph, isWeighted, is0 }: any) {\n  return (\n    <div className=\"App\" style={{ height: \"100%\" }}>\n      <div style={{ textAlign: \"center\", height: 55 }}>\n        <b>Input Type:</b> {inputFormat === \"edg\" ? \"Edges List\" : \"Adjacency List\"}&emsp;&emsp;\n        <b>Graph Type:</b> {isDirected ? \"Directed\" : \"Undirected\"}&emsp;&emsp;\n        <b>isWeighted:</b>{isWeighted ? \"True\" : \"False\"}&emsp;&emsp;\n        <b>Start Index:</b>{is0 ? \"0\" : \"1\"} <br />\n        <b>Input</b> {inputString}\n      </div>\n      {/* <div> */}\n      <div style={{height: \"calc(100% - 105px)\"}}>\n      {/* @ts-ignore */}\n      <Graph\n        options={{\n          edges: {\n            arrows: {\n              to: {\n                enabled: isDirected,\n              }\n            }\n          }\n        }}\n        graph={graph}\n      />\n      </div>\n      <div style={{ textAlign: \"center\", height: 20 }}>\n        <button className=\"center-button btn btn-primary\" onClick={() => setShowGraph(false)}><span className=\"reload\">&#x21bb;</span></button>\n      </div>\n    </div>\n  );\n}\n\nexport default GraphElement;\n","const links = [\n    { name: \"Dijkstra's algorithm\",                 link: \"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\" },\n    { name: \"DJP algorithm (Prim's algorithm) \",    link: \"https://en.wikipedia.org/wiki/Prim%27s_algorithm\" },\n    { name: \"Dijkstra-Scholten algorithm\",          link: \"https://en.wikipedia.org/wiki/Dijkstra%E2%80%93Scholten_algorithm\" },\n    { name: \"Banker's algorithm\",                   link: \"https://en.wikipedia.org/wiki/Banker%27s_algorithm\" },\n    { name: \"Dekker's algorithm (generalization)\",  link: \"https://en.wikipedia.org/wiki/Dekker%27s_algorithm\" },\n    { name: \"Smoothsort\",                           link: \"https://en.wikipedia.org/wiki/Smoothsort\" },\n    { name: \"Shunting-yard algorithm\",              link: \"https://en.wikipedia.org/wiki/Shunting-yard_algorithm\" },\n    // { name: \"Tri-color marking algorithm\",          link: \"https://www.memorymanagement.org/glossary/t.html#:~:text=Tri%2Dcolor%20marking%20is%20a,root%20set%20is%20colored%20gray.\" },\n    { name: \"Concurrent algorithms\",                link: \"https://en.wikipedia.org/wiki/Concurrency_(computer_science)\" },\n    { name: \"Distributed algorithms\",               link: \"https://en.wikipedia.org/wiki/Distributed_algorithm\" },\n    { name: \"Deadlock prevention algorithms\",       link: \"https://en.wikipedia.org/wiki/Deadlock_prevention_algorithms\" },\n    { name: \"Mutual exclusion algorithms\",          link: \"https://en.wikipedia.org/wiki/Mutual_exclusion\" },\n    { name: \"Self-stabilizing algorithms\",          link: \"https://en.wikipedia.org/wiki/Self-stabilization\" },\n]\n\nexport default links","import React from 'react';\nimport AlgoLinks from '../algoLinks'\nfunction Input({ inputString, setinputString, parse,\n  setinputFormat, inputFormat, setGraphType, graphType, format, error,\n  isWeighted, setIsWeighted, setIs0, is0, inputType, setInputType\n}: any) {\n  return (\n    // <div>\n    <div className=\"input-container\">\n      {/* <form> */}\n      <div className=\"card container\">\n        <div>\n          <h2 style={{ textAlign: \"center\", margin: 10 }}> Input Graph </h2>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-lg-6 col-sm-12 input-item\" style={{ borderRight: \"1px solid rgba(0,0,0,.125)\" }}>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <h5>Input Type</h5>\n                <div><input type=\"radio\" checked={inputType === \"plain\"} name=\"inputType\" value=\"plain\" onChange={() => {setinputFormat(\"edg\");setInputType(\"plain\")}} /> Plain Text</div>\n                <div><input type=\"radio\" checked={inputType === \"array\"} name=\"inputType\" value=\"array\" onChange={() => setInputType(\"array\")} /> Array</div>\n              </div>\n              <div className=\"col-sm-6\">\n                <h5>Input Format</h5>\n                <div><input type=\"radio\" checked={inputFormat === \"edg\"} name=\"inputFormat\" value=\"edg\" onChange={() => setinputFormat(\"edg\")} /> Edges List</div>\n                {inputType===\"plain\"?<div/>:<div><input type=\"radio\" checked={inputFormat === \"adj\"} name=\"inputFormat\" value=\"adj\" onChange={() => setinputFormat(\"adj\")} /> Adjacency List</div>}\n              </div>\n              <div className=\"col-sm-6\">\n                <h5>Graph Type</h5>\n                <div><input type=\"radio\" checked={graphType === \"undirected\"} name=\"graphType\" onChange={() => setGraphType(\"undirected\")} /> Undirected List</div>\n                <div><input type=\"radio\" checked={graphType === \"directed\"} name=\"graphType\" onChange={() => setGraphType(\"directed\")} /> Directed List</div>\n              </div>\n              <div className=\"col-sm-6\">\n                <h5>Start Index</h5>\n                <div><input type=\"radio\" checked={is0 === false} name=\"is0\" value=\"1\" onChange={() => setIs0(false)} /> 1</div>\n                <div><input type=\"radio\" checked={is0 === true} name=\"is0\" value=\"0\" onChange={() => setIs0(true)} /> 0</div>\n              </div>\n            </div>\n            <div style={{ width: \"100%\", margin: \"10px 0px\" }}>\n              <input type=\"checkbox\" onChange={(e) => { setIsWeighted(e.target.checked) }} checked={isWeighted} />    Is Graph Weighted?\n            </div>\n            <div style={{ width: \"100%\" }}>\n              <h5>Input</h5>\n              <textarea placeholder={format.ex} rows={5} style={{ padding: 10, resize: \"none\", width: \"100%\" }} value={inputString} onChange={(e) => setinputString(e.target.value)} />\n            </div>\n          </div>\n\n\n          <div className=\"col-lg-6 col-sm-12 input-item\">\n            <h5>Input Format</h5>\n            <pre style={{whiteSpace: \"break-spaces\"}}>\n              {format.text}\n            </pre>\n            <b>Example:</b> <pre>{format.ex}</pre>\n            <p>\n              {format.exp}\n            </p>\n          </div>\n        </div>\n        <div className=\"row\">\n\n        </div>\n        <hr />\n        <div style={{ color: \"red\", textAlign: \"center\" }}>{error}</div>\n        <div style={{ margin: \"0 -15px\", width: \"calc(100% + 30px)\" }}>\n          <button style={{ borderRadius: \"0px 0px 0.25rem 0.25rem\" }} className=\"input-submit btn btn-primary\" onClick={parse}>Submit</button></div>\n      </div>\n      <div>\n\n      </div>\n\n      {/* </form> */}\n      <div className=\"card\" style={{ textAlign: \"left\" }}>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Useful Algorithms</h5>\n          <h6 className=\"card-subtitle mb-2 text-muted\">Links</h6>\n          <div className=\"card-text\">\n            <ol>\n              {(() => {\n                return AlgoLinks.map((e,i) => <li key={i}> <a rel=\"noopener noreferrer\" target=\"_blank\" href={e.link} > {e.name}</a></li>)\n              })()}\n            </ol>\n          </div>\n          {/* <a href=\"#\" className=\"card-link\">Card link</a> */}\n          {/* <a href=\"#\" className=\"card-link\">Another link</a> */}\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nexport default Input;\n","const formatData: any = {\n    plain: {\n        unw: {\n            edg: {\n                text: \"The first line contains two integers 𝑛, 𝑚 — the number of vertices and the number of edges in the graph.\\nThe 𝑖-th of the next 𝑚 lines contains two integers 𝑎𝑖, 𝑏𝑖 representing an edge connecting 𝑎𝑖 and 𝑏𝑖\",\n                ex: \"3 3\\n1 2\\n1 3\\n2 3\",\n                in: \"6 9\\n1 2\\n1 5\\n1 1\\n5 2\\n4 3\\n4 5\\n3 2\\n6 4\\n5 5\",\n                exp: \"Means there are edges from 1 to 2, 1 to 3 and 2 to 3.\"\n            },\n        },\n        w: {\n            edg: {\n                text: \"The first line contains two integers 𝑛, 𝑚 — the number of vertices and the number of edges in the graph.\\nThe 𝑖-th of the next 𝑚 lines contains tree integers a𝑖, b𝑖, w𝑖 representing an edge connecting 𝑎𝑖 and 𝑏𝑖 with weight w𝑖\",\n                ex: \"3 3\\n1 2 8\\n1 3 9\\n2 3 7\",\n                in: \"6 9\\n1 2 5\\n1 3 7\\n2 3 8\\n4 4 9\\n4 5 9\\n5 6 1\\n6 4 3\\n6 1 9\\n1 1 8\",\n                exp: \"Means there are edges from 1 to 2, 1 to 3 and 2 to 3.\"\n            },\n        }\n    },\n    array: {\n        unw: {\n            edg: {\n                text: \"Provide an array G where G[i] = [ui, vi] denotes that there is an edge between nodes ui and vi.\",\n                ex: \"[[1,2],[1,3],[2,3]]\",\n                in: \"[[1,2],[1,5],[1,1],[5,2],[4,3],[4,5],[3,2],[6,4],[5,5]]\",\n                exp: \"Means there are edges from 1 to 2, 1 to 3 and 2 to 3.\"\n            },\n            adj: {\n                text: \"Provide an array G where G[i] is the list of vertices adjacent to the ith vertex. The size of the array is equal to the number of vertices.\",\n                ex: \"[[2,3],[3],[]]\",\n                in: \"[[2,3,1],[],[4,5],[3,4],[1],[4,1]]\",\n                exp: \"Means there are edges from 1 to 2,3 from 1 to 3 and 2 to 3.\"\n            }\n        },\n        w: {\n            edg: {\n                text: \"Provide an array G where G[i] = [ui, vi, wi] denotes that there is an edge between nodes ui and vi with weight wi.\",\n                ex: \"[[1,2,8],[1,3,9],[2,3,7]]\",\n                in: \"[[1,2,5],[1,3,7],[2,3,8],[4,4,9],[4,5,9],[5,6,1],[6,4,3],[6,1,9],[1,1,8]]\",\n                exp: \"Means there are edges from 1 to 2, 1 to 3 and 2 to 3.\"\n            },\n            adj: {\n                text: \"Provide an array G where G[i] is the list of pair of vertex and distance adjacent to the ith vertex. The size of the array is equal to the number of vertices.\",\n                ex: `[\\n [[2,8],[3,9]],\\n [[3,7]],\\n []\\n]`,\n                in: `[[[1,1],[2,5],[3,3]],[[3,7]],[[4,8],[5,9]],[[2,3],[3,1]],[[1,9]],[[4,4],[1,6],[6,6]]]`,\n                exp: \"Means there are edges from 1 to 2, 1 to 3 and 2 to 3.\"\n            }\n        }\n    }\n\n}\nfunction add(s:string){\n    return s.split(\"\\n\").map((e,i)=>{\n        if(i===0) return (parseInt(s[0])+1).toString()+\" \"+(parseInt(s[2])+1).toString();\n        return e;\n    }).join(\"\\n\")\n}\nconst formatFor0=(f:any)=>{\n    let x=JSON.parse(JSON.stringify(formatData).split('').map((e:any)=> (e!==' ' && !isNaN(e))? parseInt(e)-1: e).join(\"\"))\n    x.plain.unw.edg.ex=add(x.plain.unw.edg.ex)\n    x.plain.unw.edg.in=add(x.plain.unw.edg.in)\n    x.plain.w.edg.ex=add(x.plain.w.edg.ex)\n    x.plain.w.edg.in=add(x.plain.w.edg.in)\n    return x;\n}\n\n\nconst format = {\n    s1: formatData,\n    s0: formatFor0(formatData),\n}\nexport default format;\n\n","import React, { useState } from 'react';\nimport create from './graph/createGraph'\nimport GraphElement from './component/graph'\nimport './App.css';\nimport Input from './component/input';\nimport input from './inputFormat';\n\ninterface IGraph { nodes: { id: number, label: string }[], edges: { from: number, to: number }[] }\n\nfunction App() {\n  const [inputString, setinputString] = useState('');\n  const [graph, setGraph]         = useState<IGraph>({ nodes: [], edges: [] });\n  const [showGraph, setShowGraph] = useState(false);\n  const [inputFormat, setinputFormat] = useState(\"edg\");\n  const [graphType, setGraphType] = useState(\"undirected\");\n  const [error, setError]         = useState(\"\");\n  const [isWeighted,setIsWeighted]= useState(false);\n  const [is0,setIs0]              = useState(false);\n  const [inputType, setInputType] = useState(\"plain\");\n  let f=input[is0?\"s0\":\"s1\"][inputType][isWeighted?\"w\":\"unw\"][inputFormat]\n  React.useEffect(()=>{\n    setinputString(f.in)\n  },[f])\n  const parse = () => {\n    setError(\"\");\n    try {\n      setGraph(create(inputString.trim(), inputFormat, graphType, isWeighted,is0, inputType===\"plain\"));\n      setShowGraph(true);\n    } catch (err) {\n      console.error(err)\n      console.error(err.message)\n      setError(\"Enter a valid Array according to the format.\");\n    }\n  }\n\n  if (showGraph)\n    return <GraphElement\n      graph={graph}\n      inputString={inputString}\n      graphType={graphType}\n      inputFormat={inputFormat}\n      isDirected={graphType === \"directed\"}\n      isWeighted={isWeighted}\n      setShowGraph={setShowGraph}\n      is0={is0}\n    />\n  // let f=isWeighted?inputFormat.w[inputFormat]:inputFormat.unw[inputFormat]\n  // if(is0){\n  //   f=JSON.parse(JSON.stringify(f).split('').map((e:any)=> (e!==' ' && !isNaN(e))? parseInt(e)-1: e).join(\"\"))\n  // }\n  const props={\n    isWeighted, setIsWeighted,setinputString,\n    parse,inputString,setinputFormat, is0,setIs0,\n    inputFormat,setGraphType,graphType,error,\n    inputType, setInputType,\n    format:f\n  }\n  return  <Input {...props} /> ;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <a className=\"navbar-brand\" href=\"/\">Graph Visualizer</a>\n      <a className=\"github-button\" href=\"https://github.com/awasthishubh/graph-visualizer\" data-icon=\"octicon-star\" data-size=\"large\" aria-label=\"Star awasthishubh/graph-visualizer on GitHub\">Star on GitHub</a>\n    </nav>\n\n    <div style={{ height: \"calc(100vh - 56px)\" }}>\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}