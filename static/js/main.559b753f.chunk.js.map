{"version":3,"sources":["graph/parser/adjacencyList.ts","graph/parser/edgesList.ts","graph/graph-builder/directedGraph.ts","graph/createGraph.ts","component/graph.tsx","component/input.tsx","inputFormat.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AdjacencyListParser","S","edges","N","l","JSON","parse","this","i","length","j","push","EdgesListParser","console","log","forEach","ed","Math","max","GraphBuild","n","e","nodes","id","label","toString","edge","from","to","a","b","asert","A","B","M","T","Error","create","s","inputType","graphType","glist","graph","getNumberOfNodes","getEdges","E","mx","Number","isInteger","validateEdges","getGraph","GraphElement","isDirected","setShowGraph","className","style","height","onClick","options","arrows","enabled","Input","inputString","setinputString","setInputType","setGraphType","format","error","margin","textAlign","borderRight","type","checked","name","value","onChange","width","placeholder","ex","rows","padding","resize","target","text","exp","color","edg","adj","App","useState","setGraph","showGraph","setError","err","message","replace","inputFormat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","href","data-icon","data-size","aria-label","document","getElementById"],"mappings":"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","file":"static/js/main.559b753f.chunk.js","sourcesContent":["class AdjacencyListParser {\n    edges: number[][];\n    N: number;\n    constructor(S: string) {\n        let l: number[][] = JSON.parse(S);\n        this.edges = []\n        for (let i = 0; i < l.length; i++) {\n            for (let j = 0; j < l[i].length; j++) {\n                this.edges.push([i + 1, l[i][j]]);\n            }\n        }\n        this.N = l.length;\n    }\n    getEdges(): number[][] { return this.edges; }\n    getNumberOfNodes(): number { return this.N; }\n}\nexport default AdjacencyListParser;","class EdgesListParser {\n    edges: number[][];\n    N: number = 0;\n    constructor(S: string) {\n        let l: number[][] = JSON.parse(S);\n        this.edges = l\n        console.log(this.edges)\n        l.forEach(ed => {\n            this.N = Math.max(this.N, ed[0], ed[1]);\n        })\n    }\n    getEdges(): number[][] { return this.edges; }\n    getNumberOfNodes(): number { return this.N; }\n}\nexport default EdgesListParser;","class GraphBuild {\n    nodes: { id: number, label: string }[] = [];\n    edges: { from: number, to: number }[] = [];\n    N;\n    constructor(n: number, e: number[][]) {\n        for (let i = 0; i < n; i++) {\n            this.nodes.push({ id: i + 1, label: (i + 1).toString() })\n        }\n        if (e) {\n            e.forEach(edge => {\n                this.edges.push({ from: edge[0], to: edge[1] });\n            });\n        }\n        this.N = n;\n    }\n    addEdge(a: number, b: number) {\n        if (a > 0 && a <= this.N && b > 0 && b <= this.N) {\n            this.edges.push({ from: a, to: b });\n        }\n    }\n    getEdges() { return this.edges; }\n    getNodes() { return this.nodes; }\n    getGraph() {\n        return { nodes: this.nodes, edges: this.edges }\n    }\n}\n\nexport default GraphBuild;","import AdjacencyListParser from './parser/adjacencyList'\nimport EdgesListParser from './parser/edgesList'\nimport GraphBuild from './graph-builder/directedGraph'\n\nfunction asert(A: any, B: any, M: string, T: number) {\n    if ((T === 0 && A !== B) || (T === 1 && A > B)) {\n        throw new Error(M);\n    }\n}\n\nfunction validateEdges(E: number[][], N: number) {\n    // Validate all nodes less than N;\n    let mx = 0;\n    E.forEach(e => {\n        asert(e.length, 2, \"Invalid Edge.\", 0);\n        asert(Number.isInteger(e[0]), true, \"Expected number, found '\" + e[0] + \"'.\", 0);\n        asert(Number.isInteger(e[1]), true, \"Expected number, found '\" + e[1] + \"'.\", 0);\n        mx = Math.max(mx, e[0], e[1]);\n    })\n    asert(mx, N, \"Edge ID should be less than \" + N + \".\", 1);\n}\nfunction create(s: string, inputType: string, graphType: string) {\n    var glist;\n    if (inputType === \"edg\") glist = new EdgesListParser(s);\n    else glist = new AdjacencyListParser(s);\n\n    var graph = new GraphBuild(glist.getNumberOfNodes(), glist.getEdges());\n    console.log(glist.getEdges())\n    validateEdges(glist.getEdges(), graph.N);\n    return graph.getGraph();\n}\nexport default create;","import React from 'react';\nimport Graph from 'vis-react';\n\nfunction GraphElement({ graph, isDirected, setShowGraph }: any) {\n  return (\n    <div className=\"App\" style={{ height: \"100%\" }}>\n      <button className=\"center-button btn btn-dark\"><span className=\"reload\" onClick={() => setShowGraph(false)}>&#x21bb;</span></button>\n      {/* @ts-ignore */}\n      <Graph\n        options={{\n          edges: {\n            arrows: {\n              to: {\n                enabled: isDirected,\n              }\n            }\n          }\n        }}\n        graph={graph}\n      />\n    </div>\n  );\n}\n\nexport default GraphElement;\n","import React from 'react';\n\nfunction Input({ inputString, setinputString, parse, setInputType, inputType, setGraphType, graphType, format, error }: any) {\n  return (\n    <div className=\"input-container\">\n      {/* <form> */}\n      <div className=\"card container\" style={{ margin: \"auto\" }}>\n        <div>\n          <h2 style={{ textAlign: \"center\", margin: 10 }}> Input Graph </h2>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-lg-6 col-sm-12 input-item\" style={{ borderRight: \"1px solid rgba(0,0,0,.125)\" }}>\n            <div className=\"row\">\n              <div className=\"col-sm-5\">\n                <h5>Input Type</h5>\n                <div><input type=\"radio\" checked={inputType === \"edg\"} name=\"inputType\" value=\"edg\" onChange={() => setInputType(\"edg\")} /> Edges List</div>\n                <div><input type=\"radio\" checked={inputType === \"adj\"} name=\"inputType\" value=\"adj\" onChange={() => setInputType(\"adj\")} /> Adjacency List</div>\n              </div>\n              <div className=\"col-sm-5\">\n                <h5>Graph Type</h5>\n                <div><input type=\"radio\" checked={graphType === \"undirected\"} name=\"graphType\" value=\"adj\" onChange={() => setGraphType(\"undirected\")} /> Undirected List</div>\n                <div><input type=\"radio\" checked={graphType === \"directed\"} name=\"graphType\" value=\"edg\" onChange={() => setGraphType(\"directed\")} /> Directed List</div>\n              </div>\n            </div>\n            <div style={{ width: \"100%\" }}>\n              <h5>Input Array</h5>\n              <textarea placeholder={format.ex} rows={5} style={{ padding: 10, resize: \"none\", width: \"100%\" }} value={inputString} onChange={(e) => setinputString(e.target.value)} />\n            </div>\n          </div>\n\n\n          <div className=\"col-lg-6 col-sm-12 input-item\">\n            <h5>Input Format</h5>\n            <p>\n              {format.text}\n            </p>\n            <b>Example:</b> <pre>{format.ex}</pre>\n            <p>\n              {format.exp}\n            </p>\n          </div>\n        </div>\n        <div className=\"row\">\n\n        </div>\n        <hr />\n        <div style={{ color: \"red\", textAlign: \"center\" }}>{error}</div>\n        <div><button className=\"input-submit\" onClick={parse}>Submit</button></div>\n      </div>\n\n      {/* </form> */}\n    </div>\n  );\n}\n\nexport default Input;\n","const format: any = {\n    edg: {\n        text: \"Provide an array G where G[i] = [ui, vi] denotes that there is an edge between nodes ui and vi.\",\n        ex: \"[[1,2],[1,3],[2,3]]\",\n        exp: \"Means there are edges from 1 to 2, 1 to 3 and 2 to 3.\"\n    },\n    adj: {\n        text: \"Provide an array G where G[i] is the list of vertices adjacent to the ith vertex. The size of the array is equal to the number of vertices.\",\n        ex: \"[[2,3],[3],[]]\",\n        exp: \"Means there are edges from 1 to 2, 1 to 3 and 2 to 3.\"\n    }\n\n}\nexport default format;","import React, { useState } from 'react';\nimport create from './graph/createGraph'\nimport GraphElement from './component/graph'\nimport './App.css';\nimport Input from './component/input';\nimport inputFormat from './inputFormat';\n\ninterface IGraph { nodes: { id: number, label: string }[], edges: { from: number, to: number }[] }\n\nfunction App() {\n  const [inputString, setinputString] = useState('');\n  const [graph, setGraph] = useState<IGraph>({ nodes: [], edges: [] });\n  const [showGraph, setShowGraph] = useState(false);\n  const [inputType, setInputType] = useState(\"edg\");\n  const [graphType, setGraphType] = useState(\"undirected\");\n  const [error, setError] = useState(\"\");\n\n  const parse = () => {\n    setError(\"\");\n    try {\n      setGraph(create(inputString, inputType, graphType));\n      setShowGraph(true);\n    } catch (err) {\n      setError(err.message.replace(\"JSON\", \"Array\"));\n    }\n  }\n\n  if (showGraph)\n    return <GraphElement\n      graph={graph}\n      inputString={inputString}\n      graphType={graphType}\n      inputType={inputType}\n      isDirected={graphType === \"directed\"}\n      setShowGraph={setShowGraph}\n    />\n  return (\n    <Input\n      setinputString={setinputString}\n      parse={parse}\n      inputString={inputString}\n      setInputType={setInputType}\n      inputType={inputType}\n      setGraphType={setGraphType}\n      graphType={graphType}\n      format={inputFormat[inputType]}\n      error={error}\n    />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <a className=\"navbar-brand\" href=\"/\">Graph Visualizer</a>\n      <a className=\"github-button\" href=\"https://github.com/awasthishubh/graph-visualizer\" data-icon=\"octicon-star\" data-size=\"large\" aria-label=\"Star awasthishubh/graph-visualizer on GitHub\">Star on GitHub</a>\n    </nav>\n\n    <div style={{ height: \"calc(100vh - 56px)\" }}>\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}