{"version":3,"sources":["graph/parser/adjacencyList.ts","graph/parser/edgesList.ts","graph/graph-builder/directedGraph.ts","graph/createGraph.ts","component/graph.tsx","algoLinks.tsx","component/input.tsx","inputFormat.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AdjacencyListParser","S","isWeighted","is0","edges","N","this","withWeight","withoutWeight","l","JSON","parse","console","log","i","length","j","push","EdgesListParser","forEach","ed","Math","max","GraphBuild","n","e","nodes","id","label","toString","edge","undefined","from","to","a","b","asert","A","B","M","T","Error","create","s","inputType","graphType","glist","graph","getNumberOfNodes","getEdges","E","mx","Number","isInteger","validateEdges","getGraph","GraphElement","inputString","isDirected","setShowGraph","className","style","height","onClick","textAlign","options","arrows","enabled","links","name","link","Input","setinputString","setInputType","setGraphType","format","error","setIsWeighted","setIs0","margin","borderRight","type","checked","value","onChange","width","target","placeholder","ex","rows","padding","resize","text","exp","color","borderRadius","AlgoLinks","map","rel","href","unw","edg","in","adj","w","App","useState","setGraph","showGraph","setError","f","inputFormat","stringify","split","isNaN","parseInt","join","React","useEffect","props","err","message","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","data-icon","data-size","aria-label","document","getElementById"],"mappings":"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","file":"static/js/main.81e7e98d.chunk.js","sourcesContent":["class AdjacencyListParser {\n    edges: number[][];\n    N: number;\n    withoutWeight(S: string, is0: boolean): void {\n        let l: number[][] = JSON.parse(S);\n        console.log(l)\n        for (let i = 0; i < l.length; i++) {\n            for (let j = 0; j < l[i].length; j++) {\n                this.edges.push([i + (is0?0:1), l[i][j]]);\n            }\n        }\n        this.N = l.length;\n    }\n    withWeight(S: string,is0:boolean): void {\n        let l: number[][][] = JSON.parse(S);\n        for (let i = 0; i < l.length; i++) {\n            for (let j = 0; j < l[i].length; j++) {\n                this.edges.push([i + (is0?0:1), l[i][j][0], l[i][j][1]]);\n            }\n        }\n        this.N = l.length;\n    }\n    constructor(S: string, isWeighted: boolean, is0: boolean) {\n        this.edges = []\n        this.N = 0;\n        if(isWeighted) this.withWeight(S,is0);\n        else this.withoutWeight(S,is0);\n    }\n    getEdges(): number[][] { return this.edges; }\n    getNumberOfNodes(): number { return this.N; }\n}\nexport default AdjacencyListParser;","class EdgesListParser {\n    edges: number[][];\n    N: number = 0;\n    constructor(S: string, isWeighted: boolean, is0: boolean) {\n        let l: number[][] = JSON.parse(S);\n        this.edges = l\n        l.forEach(ed => {\n            this.N = Math.max(this.N, ed[0], ed[1]);\n        })\n        if(is0) this.N++;\n}\n    getEdges(): number[][] { return this.edges; }\n    getNumberOfNodes(): number { return this.N; }\n}\nexport default EdgesListParser;","class GraphBuild {\n    nodes: { id: number, label: string }[] = [];\n    edges: { from: number, to: number, label?: string }[] = [];\n    N;\n    constructor(n: number, e: number[][], isWeighted: boolean,  is0: boolean) {\n        for (let i = 0; i < n; i++) {\n            this.nodes.push({ id: i + (is0?0:1), label: (i + (is0?0:1)).toString() })\n        }\n        if (e) {\n            e.forEach(edge => {\n                if (isWeighted && edge[2] !== undefined) this.edges.push({ from: edge[0], to: edge[1], label: edge[2].toString() });\n                else this.edges.push({ from: edge[0], to: edge[1] });\n            });\n        }\n        console.log(e)\n        this.N = n;\n    }\n    addEdge(a: number, b: number) {\n        if (a > 0 && a <= this.N && b > 0 && b <= this.N) {\n            this.edges.push({ from: a, to: b });\n        }\n    }\n    getEdges() { return this.edges; }\n    getNodes() { return this.nodes; }\n    getGraph() {\n        return { nodes: this.nodes, edges: this.edges }\n    }\n}\n\nexport default GraphBuild;","import AdjacencyListParser from './parser/adjacencyList'\nimport EdgesListParser from './parser/edgesList'\nimport GraphBuild from './graph-builder/directedGraph'\n\nfunction asert(A: any, B: any, M: string, T: number) {\n    if ((T === 0 && A !== B) || (T === 1 && A > B)) {\n        throw new Error(M);\n    }\n}\n\nfunction validateEdges(E: number[][], N: number, isWeighted:boolean) {\n    // Validate all nodes less than N;\n    let mx = 0;\n    E.forEach(e => {\n        // console.log(e.length, isWeighted?3:2)\n        asert(e.length, isWeighted?3:2, `Found an invalid edge for ${isWeighted?\"a weighted\":\"an unweighted\"} graph.`, 0);\n        asert(Number.isInteger(e[0]), true, \"Expected number, found '\" + e[0] + \"'.\", 0);\n        asert(Number.isInteger(e[1]), true, \"Expected number, found '\" + e[1] + \"'.\", 0);\n        mx = Math.max(mx, e[0], e[1]);\n    })\n    asert(mx, N, \"Edge ID should be less than \" + N + \".\", 1);\n}\nfunction create(s: string, inputType: string, graphType: string, isWeighted:boolean,is0: boolean) {\n    var glist;\n    if (inputType === \"edg\") glist = new EdgesListParser(s, isWeighted,is0);\n    else glist = new AdjacencyListParser(s, isWeighted,is0);\n\n    var graph = new GraphBuild(glist.getNumberOfNodes(), glist.getEdges(), isWeighted,is0);\n    // console.log(glist.getEdges())\n    validateEdges(glist.getEdges(), graph.N, isWeighted);\n    return graph.getGraph();\n}\nexport default create;","import React from 'react';\nimport Graph from 'vis-react';\n\nfunction GraphElement({ inputString, graph, inputType, isDirected, setShowGraph,isWeighted,is0 }: any) {\n  return (\n    <div className=\"App\" style={{ height: \"100%\" }}>\n      <button className=\"center-button btn btn-primary\" onClick={() => setShowGraph(false)}><span className=\"reload\">&#x21bb;</span></button>\n      <div style={{textAlign: \"center\"}}>\n      <b>Input Type:</b> {inputType===\"edg\"?\"Edges List\":\"Adjacency List\"}&emsp;&emsp;\n      <b>Graph Type:</b> {isDirected?\"Directed\":\"Undirected\"}&emsp;&emsp;\n      <b>isWeighted:</b>{isWeighted?\"True\":\"False\"}&emsp;&emsp;\n      <b>Start Index:</b>{is0?\"0\":\"1\"} <br/>\n      <b>Input Array</b> {inputString}\n      </div>\n      {/* @ts-ignore */}\n      <Graph\n        options={{\n          edges: {\n            arrows: {\n              to: {\n                enabled: isDirected,\n              }\n            }\n          }\n        }}\n        graph={graph}\n      />\n    </div>\n  );\n}\n\nexport default GraphElement;\n","const links = [\n    { name: \"Dijkstra's algorithm\",                 link: \"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\" },\n    { name: \"DJP algorithm (Prim's algorithm) \",    link: \"https://en.wikipedia.org/wiki/Prim%27s_algorithm\" },\n    { name: \"Dijkstra-Scholten algorithm\",          link: \"https://en.wikipedia.org/wiki/Dijkstra%E2%80%93Scholten_algorithm\" },\n    { name: \"Banker's algorithm\",                   link: \"https://en.wikipedia.org/wiki/Banker%27s_algorithm\" },\n    { name: \"Dekker's algorithm (generalization)\",  link: \"https://en.wikipedia.org/wiki/Dekker%27s_algorithm\" },\n    { name: \"Smoothsort\",                           link: \"https://en.wikipedia.org/wiki/Smoothsort\" },\n    { name: \"Shunting-yard algorithm\",              link: \"https://en.wikipedia.org/wiki/Shunting-yard_algorithm\" },\n    // { name: \"Tri-color marking algorithm\",          link: \"https://www.memorymanagement.org/glossary/t.html#:~:text=Tri%2Dcolor%20marking%20is%20a,root%20set%20is%20colored%20gray.\" },\n    { name: \"Concurrent algorithms\",                link: \"https://en.wikipedia.org/wiki/Concurrency_(computer_science)\" },\n    { name: \"Distributed algorithms\",               link: \"https://en.wikipedia.org/wiki/Distributed_algorithm\" },\n    { name: \"Deadlock prevention algorithms\",       link: \"https://en.wikipedia.org/wiki/Deadlock_prevention_algorithms\" },\n    { name: \"Mutual exclusion algorithms\",          link: \"https://en.wikipedia.org/wiki/Mutual_exclusion\" },\n    { name: \"Self-stabilizing algorithms\",          link: \"https://en.wikipedia.org/wiki/Self-stabilization\" },\n]\n\nexport default links","import React from 'react';\nimport AlgoLinks from '../algoLinks'\nfunction Input({ inputString, setinputString, parse,\n  setInputType, inputType, setGraphType, graphType, format, error,\n  isWeighted, setIsWeighted, setIs0, is0\n}: any) {\n  return (\n    // <div>\n    <div className=\"input-container\">\n      {/* <form> */}\n      <div className=\"card container\">\n        <div>\n          <h2 style={{ textAlign: \"center\", margin: 10 }}> Input Graph </h2>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-lg-6 col-sm-12 input-item\" style={{ borderRight: \"1px solid rgba(0,0,0,.125)\" }}>\n            <div className=\"row\">\n              <div className=\"col-sm-4\">\n                <h5>Input Type</h5>\n                <div><input type=\"radio\" checked={inputType === \"edg\"} name=\"inputType\" value=\"edg\" onChange={() => setInputType(\"edg\")} /> Edges List</div>\n                <div><input type=\"radio\" checked={inputType === \"adj\"} name=\"inputType\" value=\"adj\" onChange={() => setInputType(\"adj\")} /> Adjacency List</div>\n              </div>\n              <div className=\"col-sm-4\">\n                <h5>Graph Type</h5>\n                <div><input type=\"radio\" checked={graphType === \"undirected\"} name=\"graphType\" onChange={() => setGraphType(\"undirected\")} /> Undirected List</div>\n                <div><input type=\"radio\" checked={graphType === \"directed\"} name=\"graphType\" onChange={() => setGraphType(\"directed\")} /> Directed List</div>\n              </div>\n              <div className=\"col-sm-4\">\n                <h5>Start Index</h5>\n                <div><input type=\"radio\" checked={is0 === false} name=\"is0\" value=\"1\" onChange={() => setIs0(false)} /> 1</div>\n                <div><input type=\"radio\" checked={is0 === true} name=\"is0\" value=\"0\" onChange={() => setIs0(true)} /> 0</div>\n              </div>\n            </div>\n            <div style={{ width: \"100%\", margin: \"10px 0px\" }}>\n              <input type=\"checkbox\" onChange={(e) => { setIsWeighted(e.target.checked) }} checked={isWeighted} />    Is Graph Weighted?\n            </div>\n            <div style={{ width: \"100%\" }}>\n              <h5>Input Array</h5>\n              <textarea placeholder={format.ex} rows={5} style={{ padding: 10, resize: \"none\", width: \"100%\" }} value={inputString} onChange={(e) => setinputString(e.target.value)} />\n            </div>\n          </div>\n\n\n          <div className=\"col-lg-6 col-sm-12 input-item\">\n            <h5>Input Format</h5>\n            <p>\n              {format.text}\n            </p>\n            <b>Example:</b> <pre>{format.ex}</pre>\n            <p>\n              {format.exp}\n            </p>\n          </div>\n        </div>\n        <div className=\"row\">\n\n        </div>\n        <hr />\n        <div style={{ color: \"red\", textAlign: \"center\" }}>{error}</div>\n        <div style={{ margin: \"0 -15px\", width: \"calc(100% + 30px)\" }}>\n          <button style={{ borderRadius: \"0px 0px 0.25rem 0.25rem\" }} className=\"input-submit btn btn-primary\" onClick={parse}>Submit</button></div>\n      </div>\n      <div>\n\n      </div>\n\n      {/* </form> */}\n      <div className=\"card\" style={{ textAlign: \"left\" }}>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Useful Algorithms</h5>\n          <h6 className=\"card-subtitle mb-2 text-muted\">Links</h6>\n          <p className=\"card-text\">\n            <ol>\n            {(()=>{\n              return AlgoLinks.map((e)=><li> <a rel=\"noopener noreferrer\" target=\"_blank\" href={e.link} > {e.name}</a></li>)\n            })()}\n            </ol>\n          </p>\n          {/* <a href=\"#\" className=\"card-link\">Card link</a> */}\n          {/* <a href=\"#\" className=\"card-link\">Another link</a> */}\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nexport default Input;\n","const format: any = {\n    unw: {\n        edg: {\n            text: \"Provide an array G where G[i] = [ui, vi] denotes that there is an edge between nodes ui and vi.\",\n            ex: \"[[1,2],[1,3],[2,3]]\",\n            in: \"[[1,2],[1,5],[1,1],[5,2],[4,3],[4,5],[3,2],[6,4],[5,5]]\",\n            exp: \"Means there are edges from 1 to 2, 1 to 3 and 2 to 3.\"\n        },\n        adj: {\n            text: \"Provide an array G where G[i] is the list of vertices adjacent to the ith vertex. The size of the array is equal to the number of vertices.\",\n            ex: \"[[2,3],[3],[]]\",\n            in: \"[[2,3,1],[],[4,5],[3,4],[1],[4,1]]\",\n            exp: \"Means there are edges from 1 to 2,3 from 1 to 3 and 2 to 3.\"\n        }\n    },\n    w: {\n        edg: {\n            text: \"Provide an array G where G[i] = [ui, vi, wi] denotes that there is an edge between nodes ui and vi with weight wi.\",\n            ex: \"[[1,2,8],[1,3,9],[2,3,7]]\",\n            in: \"[[1,2,5],[1,3,7],[2,3,8],[4,4,9],[4,5,9],[5,6,1],[6,4,3],[6,1,9],[1,1,8]]\",\n            exp: \"Means there are edges from 1 to 2, 1 to 3 and 2 to 3.\"\n        },\n        adj: {\n            text: \"Provide an array G where G[i] is the list of pair of vertex and distance adjacent to the ith vertex. The size of the array is equal to the number of vertices.\",\n            ex: `[\\n  [[2,8],[3,9]],\\n  [[3,7]],\\n  []\\n]`,\n            in: `[[[1,1],[2,5],[3,3]],[[3,7]],[[4,8],[5,9]],[[2,3],[3,1]],[[1,9]],[[4,4],[1,6],[6,6]]]`,\n            exp: \"Means there are edges from 1 to 2, 1 to 3 and 2 to 3.\"\n        }\n    }\n\n}\nexport default format;\n\n","import React, { useState } from 'react';\nimport create from './graph/createGraph'\nimport GraphElement from './component/graph'\nimport './App.css';\nimport Input from './component/input';\nimport inputFormat from './inputFormat';\n\ninterface IGraph { nodes: { id: number, label: string }[], edges: { from: number, to: number }[] }\n\nfunction App() {\n  const [inputString, setinputString] = useState('');\n  const [graph, setGraph]         = useState<IGraph>({ nodes: [], edges: [] });\n  const [showGraph, setShowGraph] = useState(false);\n  const [inputType, setInputType] = useState(\"edg\");\n  const [graphType, setGraphType] = useState(\"undirected\");\n  const [error, setError]         = useState(\"\");\n  const [isWeighted,setIsWeighted]= useState(false);\n  const [is0,setIs0]= useState(false);\n  let f=isWeighted?inputFormat.w[inputType]:inputFormat.unw[inputType]\n  if(is0){\n    f=JSON.parse(JSON.stringify(f).split('').map((e:any)=> (e!==' ' && !isNaN(e))? parseInt(e)-1: e).join(\"\"))\n  }\n  React.useEffect(()=>{\n    setinputString(f.in)\n  },[f])\n  const parse = () => {\n    setError(\"\");\n    try {\n      setGraph(create(inputString, inputType, graphType, isWeighted,is0));\n      setShowGraph(true);\n    } catch (err) {\n      console.error(err)\n      console.error(err.message)\n      setError(\"Enter a valid Array according to the format.\");\n    }\n  }\n  console.log(is0)\n\n  if (showGraph)\n    return <GraphElement\n      graph={graph}\n      inputString={inputString}\n      graphType={graphType}\n      inputType={inputType}\n      isDirected={graphType === \"directed\"}\n      isWeighted={isWeighted}\n      setShowGraph={setShowGraph}\n      is0={is0}\n    />\n  // let f=isWeighted?inputFormat.w[inputType]:inputFormat.unw[inputType]\n  // if(is0){\n  //   f=JSON.parse(JSON.stringify(f).split('').map((e:any)=> (e!==' ' && !isNaN(e))? parseInt(e)-1: e).join(\"\"))\n  // }\n  const props={\n    isWeighted, setIsWeighted,setinputString,\n    parse,inputString,setInputType, is0,setIs0,\n    inputType,setGraphType,graphType,error,\n    format:f\n  }\n  return  <Input {...props} /> ;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <a className=\"navbar-brand\" href=\"/\">Graph Visualizer</a>\n      <a className=\"github-button\" href=\"https://github.com/awasthishubh/graph-visualizer\" data-icon=\"octicon-star\" data-size=\"large\" aria-label=\"Star awasthishubh/graph-visualizer on GitHub\">Star on GitHub</a>\n    </nav>\n\n    <div style={{ height: \"calc(100vh - 56px)\" }}>\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}